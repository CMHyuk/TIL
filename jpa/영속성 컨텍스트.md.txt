## 영속성 컨텍스트
* 비영속(객체를 생성한 상태)  
```
Member member = new Member();
member.setUsername("A");
```  
* 영속(객체를 저장한 상태)  
```
em.persist(member);  
```
* 준영속(영속성 컨텍스트에서 분리된 상태)  
```
em.detach(member);
```  
영속성 컨텍스트 내부에 1차 캐시가 존재  
map 형태로 key = @Id, value = Entity  

## 조회  
```em.persist();``` : 1차 캐시에 저장  
```em.find();``` : 1차 캐시에서 조회  

</br>

* 1차 캐시에 없으면 DB에서 조회 -> 1차 캐시에 저장 후 반환  
* ```em.persist();```시 SQL을 DB에 보내지 않고 커밋 순간에 전송  
* 동일 데이터 여러 번 조회 시 DB에 같은 쿼리가 전송되지 않음  
* 여러 명의 동시 요청 시 별도의 1차 캐시를 가짐

## 수정
```member.setUsername();```과 같이 작성
set 후 ```em.persist();``` 필요 x  

동작 흐름  
1. 커밋 시점에 ```flush();``` 호출  
2. Entity와 스냅샷 비교  
   - 1차 캐시 : @Id, Entity, 스냅샷  
   - 데이터 변경 시 Entity와 스냅샷 비교  
3. 쓰기 지연 SQL 저장소에 UPDATE SQL 생성  
4. 쿼리 반영 후 commit  

## 플러시
flush : 영속성 컨텍스트의 변경 내용을 DB에 반영  

* 호출 방법  
   * ```em.flush();``` : 직접 호출  
   * 트랜잭션 커밋 : 자동 호출  
   * JPQL 쿼리 실행 : 자동 호출  

</br>

* 영속성 컨텍스트를 비우지 않음  
* 변경내용을 DB에 동기화  

## 준영속
```em.detach(member);``` : 특정 Entity 준영속  
```em.clear();``` : 영속성 컨텍스트에 있는 모든 것들을 준영속으로 변경  
```em.close();``` : 영속성 컨텍스트를 종료

</br>

출처 : 자바 ORM 표준 JPA 프로그래밍 - 기본편